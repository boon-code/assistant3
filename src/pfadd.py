#!/usr/bin/env python
""" pfadd.py --

 UI generated by GUI Builder Build 146 on 2010-04-06 19:50:22 from:
    /media/data/hubi/code/python/pfgui3/src/pfadd.ui
 This file is auto-generated.  Only the code within
    '# BEGIN USER CODE (global|class)'
    '# END USER CODE (global|class)'
 and code inside the callback subroutines will be round-tripped.
 The 'main' function is reserved.
"""

from Tkinter import *
from pfadd_ui import Pfadd

# BEGIN USER CODE global
import pfscan

# END USER CODE global

class CustomPfadd(Pfadd):
    pass

    # BEGIN CALLBACK CODE
    # ONLY EDIT CODE INSIDE THE def FUNCTIONS.

    # _butAdd_command --
    #
    # Callback to handle _butAdd widget option -command
    def _butAdd_command(self, *args):
        
        links = ' '.join(self._lsLinks.get(0, 'end'))
        if len(links) <= 0:
            return
        
        result = self._app.sendcmd('add ' + links)
        self._app.report('adding links: ' + result)
        #self._app.sendcmd('update')
        self._app.close_scan()

    # _butClearall_command --
    #
    # Callback to handle _butClearall widget option -command
    def _butClearall_command(self, *args):
        
        self._lsLinks.delete(0, 'end')

    # _butRemove_command --
    #
    # Callback to handle _butRemove widget option -command
    def _butRemove_command(self, *args):
        
        curr = self._lsLinks.curselection()
        
        curr = [i for i in curr]
        curr.sort(reverse = True)
        
        for i in curr:
            self._lsLinks.delete(i)

    # _butScan_command --
    #
    # Callback to handle _butScan widget option -command
    def _butScan_command(self, *args):
        
        data = self._txData.get('0.0', 'end')
        links = pfscan.scanlinks(data)
        foundlinks = self._lsLinks.get(0, 'end')
        for link in links:
            if (not link in foundlinks) and (link != ''):
                self._lsLinks.insert('end', link)

    # _lsLinks_xscrollcommand --
    #
    # Callback to handle _lsLinks widget option -xscrollcommand
    def _lsLinks_xscrollcommand(self, *args):
        pass

    # _lsLinks_yscrollcommand --
    #
    # Callback to handle _lsLinks widget option -yscrollcommand
    def _lsLinks_yscrollcommand(self, *args):
        pass

    # _txData_xscrollcommand --
    #
    # Callback to handle _txData widget option -xscrollcommand
    def _txData_xscrollcommand(self, *args):
        pass

    # _txData_yscrollcommand --
    #
    # Callback to handle _txData widget option -yscrollcommand
    def _txData_yscrollcommand(self, *args):
        pass
    
    # END CALLBACK CODE

    # BEGIN USER CODE class
    
    def __past_text(self, event):
        
        self._txData.delete('0.0', 'end')
        event.widget.event_generate("<<Paste>>")
    
    def __past_and_scan(self, event):
        
        self.__past_text(event)
        self._butScan_command()
    
    def __init__(self, root, app):
        
        Pfadd.__init__(self, root)
        self._app = app
        # self._txData.bind("<Control_L>v", self.__past_text)
        root.bind("<Control_L>v", self.__past_and_scan)
        self._txData.bind("<Button-3>", self.__past_text)
        self._txData.bind("<Return>", self._butScan_command)
    # END USER CODE class

def main():
    # Standalone Code Initialization
    # DO NOT EDIT
    try: userinit()
    except NameError: pass
    root = Tk()
    demo = CustomPfadd(root)
    root.title('pfadd')
    try: run()
    except NameError: pass
    root.protocol('WM_DELETE_WINDOW', root.quit)
    root.mainloop()

if __name__ == '__main__': main()
