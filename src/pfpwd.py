#!/usr/bin/env python

""" pfpwd.py --

 UI generated by GUI Builder Build 146 on 2009-04-02 12:38:19 from:
    /media/data/hubi/code/python/pfgui/pfpwd.ui
 This file is auto-generated.  Only the code within
    '# BEGIN USER CODE (global|class)'
    '# END USER CODE (global|class)'
 and code inside the callback subroutines will be round-tripped.
 The 'main' function is reserved.
"""

from Tkinter import *
from pfpwd_ui import Pfpwd

# BEGIN USER CODE global

# END USER CODE global

class CustomPfpwd(Pfpwd):
    pass

    # BEGIN CALLBACK CODE
    # ONLY EDIT CODE INSIDE THE def FUNCTIONS.

    # _butAdd_command --
    #
    # Callback to handle _butAdd widget option -command
    def _butAdd_command(self, *args):
        
        new_pwd = self._entPwd.get()
        if new_pwd.strip(" ") != "":
            result = self._app.sendcmd('tmp-add-pwd ' + new_pwd)
            self._app.report("temporary add password: " + result)
            self._butUpdate_command()

    # _butUpdate_command --
    #
    # Callback to handle _butUpdate widget option -command
    def _butUpdate_command(self, *args):
        
        pwd_list = self._app.sendcmd('pwd-list')
        pwd_list = pwd_list.split("\n")
        
        self._lsPwd.delete(0, 'end')
        
        for pwd in pwd_list:
            self._lsPwd.insert('end', pwd)

    # _entPwd_invalidcommand --
    #
    # Callback to handle _entPwd widget option -invalidcommand
    def _entPwd_invalidcommand(self, *args):
        pass

    # _entPwd_validatecommand --
    #
    # Callback to handle _entPwd widget option -validatecommand
    def _entPwd_validatecommand(self, *args):
        pass

    # _entPwd_xscrollcommand --
    #
    # Callback to handle _entPwd widget option -xscrollcommand
    def _entPwd_xscrollcommand(self, *args):
        pass

    # _lsPwd_xscrollcommand --
    #
    # Callback to handle _lsPwd widget option -xscrollcommand
    def _lsPwd_xscrollcommand(self, *args):
        pass

    # _lsPwd_yscrollcommand --
    #
    # Callback to handle _lsPwd widget option -yscrollcommand
    def _lsPwd_yscrollcommand(self, *args):
        pass

    # END CALLBACK CODE

    # BEGIN USER CODE class
    
    def __init__(self, root, app):
        
        Pfpwd.__init__(self, root)
        self._app = app
        self._entPwd.bind("<Return>", self._butAdd_command)
        self._butUpdate_command()

    # END USER CODE class

def main():
    # Standalone Code Initialization
    # DO NOT EDIT
    try: userinit()
    except NameError: pass
    root = Tk()
    demo = CustomPfpwd(root)
    root.title('pfpwd')
    try: run()
    except NameError: pass
    root.protocol('WM_DELETE_WINDOW', root.quit)
    root.mainloop()

if __name__ == '__main__': main()
